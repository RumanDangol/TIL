==================Gradle=========================
-> is an open source, advanced build management system
-> build on ANT, Maven, and Ivy repositories.
-> supports Groovy based Domain Specific Language (DSL)

--------History of gradle-----------
First ant was used but ant uses xml format to write build scripts
XML is hiearchical so it became unmanageably big

So Maven was used, it changed its structure but uses XML to write build scripts
Benefit of Maven is its life cycle, uses same life cycle for multiple projects
Doesnot handle well conflicts between versions of same library and
Complex customized build scripts are hardeer
--------------------------------------------

------------- Gradle was introduced in 2012 ---------------
#Features :

-> declarative builds and build-by-convention 
-> language for dependency based programming
-> Structure your build
-> Deep API
-> Gradle scales
-> Multi-project builds
-> Different ways to manage your builds
-> First build integration tool
-> Ease of migration
-> Gradle Wrapper (allows to execute Gradle builds where Gradle is not installed, useful for continuous integration of servers)
-> Groovy(written in Groovy because similar to Java, and build should be as trasparent as possible to all team members)
 
-----------------------------------------------------

----------- Installation of Gradle in Linux ----------------------
-> Should have jdk installed greater than version 6
-> Download Gradle file
-> extract files in opt/gradle
Now setting path in terminal 
export PATH=$PATH:/opt/gradle/gradle(-4.5.1)/bin // -4.5.1 can be changed to the versions of gradle

gradle -v in terminal shows version of gradle

-----------------------------------------------------------------

----------------- Gradle Build Script -------------------------
-> Gradle builds a script for handling projects and tasks
-> Project can be library Jar or web or zip
-> tasks can be compiling class, create jar, generate javadoc, publish archives to repository

encoded using UTF-8 and named as build.gradle

# build.gradle

+++++++++++++++++++++++++++++++++
Example 1: Simple hello script
	task hello{
		doLast{
			println 'ruman'
		}}
For executing script 
gradle -q hello

doLast can be represented << like:
	task hello << { 
		println 'ruman' }
++++++++++++++++++++++++++++++++++++

-> Gradle script uses project object and script object
-> Project object can call some methods and use property in your build script which are delegated to project object
-> Script object (Gradle takes script code into classes, which implements Scrip interface and then executes.)

+++++++++++++++++++++++++++++++++++++
Example 2: Uses Groovy
	task upper << {
		String name = 'ruman'
		println "Original : " + name
		println "Upper Case : " +name.toUpperCase()}
result:
Original : ruman
Upper Case : RUMAN
+++++++++++++++++++++++++++++++++++++++++

++++++++++++++++++++++++++++++++++++++++
Example 3: uses loop
	task count << {
		4.times{ print "$it "}}
result : 0 1 2 3 
	task groovyJdk << {
		string name = "ruman";
		name.each(){ println "${it}"};
	}
result: 
r
u
m
a
n
+++++++++++++++++++++++++++++++++++++++++

